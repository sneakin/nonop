#!/usr/bin/env -S bundle exec ruby
# -*- mode: ruby -*-

require 'sg/ext'
using SG::Ext

require 'nonop'
require 'nonop/command'

class MkDirCommand < NonoP::Command::Client
  attr_reader :aname
  
  def initialize
    super
    @desc = 'Make a directory on a file server.'
    @aname = '/'
  end
  
  def opts
    super.tap do |o|
      o.on('-e', '--aname NAME') do |v|
        @aname = v
      end
    end
  end

  def run args
    @errors = []
    super do
      client.attach(uname: uname, aname: aname, n_uname: uid) do |attachment|
        raise attachment if RuntimeError === attachment

        NonoP::Async.reduce(arguments) do |path, &cc|
          mkdir(attachment, path) do |err|
            if RuntimeError === err
              $stderr.puts("%s - %s" % [ path, err ])
              @errors << [ path, err ]
            end
            cc.call(false, &method(:done))
          end
        end
      end
    end
  end

  def mkdir attachment, path, &blk
    path = NonoP::RemotePath.new(path)
    attachment.opendir(path.parent) do |parent|
      if RuntimeError === parent
        blk.call(parent)
      else
        parent.mkdir(path.basename) do |dir|
          parent.close
          blk.call(dir)
        end
      end
    end
  end

  def done ok
    NonoP.vputs { "All done. #{ok}" }
    close
    exit(1) unless @errors.empty?
  end
end

if __FILE__ == $0
  MkDirCommand.new.run(ARGV)
end
