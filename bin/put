#!/usr/bin/env -S bundle exec ruby
# -*- mode: ruby -*-

require 'sg/ext'
using SG::Ext

require 'nonop'
require 'nonop/command'

class PutCommand < NonoP::Command::Client
  attr_reader :aname, :block_size, :write_offset, :write_limit, :gid
  
  def initialize
    super
    @desc = 'Write a file to a file server.'
    @aname = '/'
    @appending = false
    @block_size = 4096
    @write_offset = 0
    @write_limit = nil
    @gid = Process.gid
  end
  
  def opts
    super.tap do |o|
      o.on('--gid INTEGER', Integer) do |v|
        @gid = v.to_i
        raise ArgumentError.new("GID must be positive") if gid < 0
      end
      o.on('-e', '--aname NAME') do |v|
        @aname = v
      end
      o.on('--block-size BYTES', Integer) do |v|
        @block_size = v
      end
      o.on('--offset INTEGER', Integer) do |v|
        @write_offset = v
      end
      o.on('--limit INTEGER', Integer) do |v|
        @write_limit = v
      end
      o.on('--append') do
        @appending = true
      end
    end
  end

  def run args
    super do
      raise ArgumentError.new('No target specified.') if arguments.empty?

      if block_size >= client.server_info[:msize]
        block_size = client.server_info[:msize] - NonoP::Decoder::MIN_MSGLEN
      end

      put(reader, arguments[0]) do |total|
        client.close
        case total
        when Exception then
          $stderr.puts("Caught #{total.class}: #{total}")
          NonoP.vputs { total.backtrace }
          exit(1)
        when NonoP::ErrorPayload
          $stderr.puts("Error #{total.class}: #{total}")
          exit(1)
        else
          $stderr.puts("Wrote %i bytes." % [ total ])
          exit(0)
        end
      end
    end
  end

  def put reader, target
    NonoP.vputs { "Put to #{target}" }
    client.attach(uname: uname, aname: aname, n_uname: uid) do |attachment|
      if Exception === attachment || NonoP::ErrorPayload === attachment
        break yield(attachment)
      end

      flags = @appending ? [ :WRONLY, :APPEND ] : [:WRONLY, :TRUNC, :CREATE]
      total = 0
      
      attachment.open(target, gid: gid, flags:) do |file|
        NonoP.vputs { "File #{target} #{file.class} #{file.ready? rescue '--'}" }
        if Exception === file || NonoP::ErrorPayload === file
          break yield(file)
        end
        
        acc = reader.reduce([0, write_offset]) do |(per_total, offset), data_block|
          if data_block
            begin
              count = file.write(data_block, offset: offset)
              [ per_total + count, offset + count ]
            rescue
              # todo test this rescue
              break yield($!)
            end
          else
            [ per_total, offset ]
          end
        end
        total += acc[0]
      end.wait

      yield(total)
    end.wait
  end    


  private
  
  def reader io = $stdin
    Enumerator.new do |y|
      begin
        data = io.read(block_size)
        y << data
      end until data == nil || data.empty?
    rescue IOError
    end
  end
  
end

if __FILE__ == $0
  PutCommand.new.run(ARGV)
end
