#!/usr/bin/env -S bundle exec ruby
# -*-ruby-*-

require 'sg/ext'
using SG::Ext

require 'socket'
require 'ninep'

if $0 == __FILE__
  require 'optparse'

  $verbose = false
  host = 'localhost'
  port = 564
  uid = 0
  uname = ''
  aname = '/'
  max_packet_size = nil
  block_size = 4096
  write_offset = 0
  write_limit = nil
  
  def vputs(*)
    return unless $verbose
    puts(*)
  end

  opts = OptionParser.new do |o|
    o.on('-v', '--verbose') do
      $verbose = true
    end
    o.on('-u', '--uname NAME') do |v|
      uname = v
    end
    o.on('--uid INTEGER', Integer) do |v|
      uid = v.to_i
      uid = nil if uid < 0
    end
    o.on('-e', '--aname NAME') do |v|
      aname = v
    end
    o.on('--max-packet-size BYTES', Integer) do |v|
      max_packet_size = v
    end
    o.on('--block-size BYTES', Integer) do |v|
      block_size = v
    end
    o.on('--offset INTEGER', Integer) do |v|
      write_offset = v
    end
    o.on('--limit INTEGER', Integer) do |v|
      write_limit = v
    end
  end

  paths = opts.parse(ARGV)
  paths << '' if paths.empty?

  sock = TCPSocket.new(host, port)
  client = NineP::Client.new(coder: NineP::L2000::Decoder.new(max_msglen: max_packet_size),
                             io: sock)

  Signal.trap('INT') do
    client.close
  end
  Signal.trap('QUIT') do
    client.close
  end
  
  client.start do |pkt|
    if block_size >= pkt.msize
      block_size = pkt.msize - NineP::Decoder::MIN_MSGLEN
    end
    
    if uid
      client.auth(uname: uname, aname: aname, n_uname: uid)
    end

   client.attach(uname: uname, aname: aname, n_uname: uid) do |attachment|
      raise attachment if StandardError === attachment
      reader = Enumerator.new do |y|
        while data = $stdin.read(block_size)
          y << data
        end
        raise StopIteration
      rescue IOError
        raise StopIteration
      end

      attachment.open(paths[0], flags: [:WRONLY, :TRUNC, :CREATE]) do |file|
        raise file if StandardError === file
        
        doner = lambda do |*state|
          vputs("ALL DONE")
          file.close
          client.close
        end

        NineP::Async.reduce(reader, 0, write_offset) do |data_block, count, offset, &cc|
          vputs("Writing #{file.class} #{data_block&.bytesize || 'nil'} #{offset} #{count}")
          file.write(data_block, offset: offset) do |reply|
            if StandardError === reply
              cc.call(reply, count, offset, &doner)
            else
              cc.call(data_block.bytesize < block_size,
                      count + reply,
                      offset + reply, &doner)
            end
          end
        end
      end
    end
  end

  client.read_loop
end
